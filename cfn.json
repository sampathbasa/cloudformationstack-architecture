{
    "Description": "My Cloud Academy Labs 2-Tier Scalable API Template",
    "Parameters": {
      "VPCAZ": {
        "Type": "AWS::EC2::AvailabilityZone::Name",
        "Description": "The Availability Zone to use for the VPC.",
        "AllowedPattern": "^(?!us-west-2d).*$",
        "ConstraintDescription": "Availability zone must not be us-west-2d."
      },
      "InstanceType": {
        "Type": "String",
        "Default": "m3.medium",
        "Description": "The type of instance to use for your system"
      },
      "LatestAmiId": {
        "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
        "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      },
      "DesiredCapacity": {
        "Type": "Number",
        "Description": "The number of EC2 instances the service should have.",
        "Default": 2
      },
      "TableThroughput": {
        "Type": "Number",
        "Description": "The number of queries per second the table should support.",
        "Default": 10
      }
    },
    "Mappings": {
      "Network": {
        "PrivateSubnet": {
          "Cidr": "10.0.0.0/24"
        },
        "PublicSubnet": {
          "Cidr": "10.0.1.0/24"
        },
        "Vpc": {
          "Cidr": "10.0.0.0/16"
        }
      }
    },
    "Resources": {
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": {
            "Fn::FindInMap": [
              "Network",
              "Vpc",
              "Cidr"
            ]
          }
        }
      },
      "PrivateSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "AvailabilityZone": {
            "Ref": "VPCAZ"
          },
          "CidrBlock": {
            "Fn::FindInMap": [
              "Network",
              "PrivateSubnet",
              "Cidr"
            ]
          },
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "PublicSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "AvailabilityZone": {
            "Ref": "VPCAZ"
          },
          "CidrBlock": {
            "Fn::FindInMap": [
              "Network",
              "PublicSubnet",
              "Cidr"
            ]
          },
          "MapPublicIpOnLaunch": true,
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "GatewayToInternet": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "NATInstance": {
        "Type": "AWS::EC2::Instance",
        "DependsOn": [
          "GatewayAttachmentToVPC",
          "RouteToGateway"
        ],
        "Properties": {
          "AvailabilityZone": {
            "Ref": "VPCAZ"
          },
          "ImageId": {
            "Ref": "LatestAmiId"
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "SecurityGroupIds": [
            {
              "Ref": "NATInstanceSecurityGroup"
            }
          ],
          "SourceDestCheck": false,
          "SubnetId": {
            "Ref": "PublicSubnet"
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash",
                  "set -x",
                  "yum -y update",
                  "echo 1 > /proc/sys/net/ipv4/ip_forward",
                  "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects",
                  "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE",
                  "/sbin/iptables-save > /etc/sysconfig/iptables",
                  "mkdir -p /etc/sysctl.d/",
                  "cat << NatConfFileMarker > /etc/sysctl.d/nat.conf",
                  "net.ipv4.ip_forward = 1",
                  "net.ipv4.conf.eth0.send_redirects = 0",
                  "NatConfFileMarker",
                  "echo --- done ---"
                ]
              ]
            }
          }
        }
      },
      "RoutesForPublicSubnet": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "RoutesForPrivateSubnet": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "GenericNACL": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "GatewayAttachmentToVPC": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {
            "Ref": "GatewayToInternet"
          },
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "RouteToGateway": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "GatewayToInternet"
          },
          "RouteTableId": {
            "Ref": "RoutesForPublicSubnet"
          }
        }
      },
      "RouteToNat": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "InstanceId": {
            "Ref": "NATInstance"
          },
          "RouteTableId": {
            "Ref": "RoutesForPrivateSubnet"
          }
        }
      },
      "NACLInboundEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "NetworkAclId": {
            "Ref": "GenericNACL"
          },
          "PortRange": {
            "From": 0,
            "To": 65535
          },
          "Protocol": 6,
          "RuleAction": "allow",
          "RuleNumber": 100
        }
      },
      "NACLOutboundEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "Egress": true,
          "NetworkAclId": {
            "Ref": "GenericNACL"
          },
          "PortRange": {
            "From": 0,
            "To": 65535
          },
          "Protocol": 6,
          "RuleAction": "allow",
          "RuleNumber": 100
        }
      },
      "NACLBindingForPublicSubnet": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnet"
          },
          "NetworkAclId": {
            "Ref": "GenericNACL"
          }
        }
      },
      "NACLBindingForPrivateSubnet": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PrivateSubnet"
          },
          "NetworkAclId": {
            "Ref": "GenericNACL"
          }
        }
      },
      "RoutesBindingForPublicSubnet": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "RoutesForPublicSubnet"
          },
          "SubnetId": {
            "Ref": "PublicSubnet"
          }
        }
      },
      "RoutesBindingForPrivateSubnet": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "RoutesForPrivateSubnet"
          },
          "SubnetId": {
            "Ref": "PrivateSubnet"
          }
        }
      },
      "LoadBalancer": {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "Listeners": [
            {
              "InstancePort": 8888,
              "InstanceProtocol": "HTTP",
              "LoadBalancerPort": 80,
              "Protocol": "HTTP"
            }
          ],
          "Scheme": "internet-facing",
          "SecurityGroups": [
            {
              "Ref": "LoadBalancerSecurityGroup"
            }
          ],
          "Subnets": [
            {
              "Ref": "PublicSubnet"
            }
          ]
        }
      },
      "InstancesGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
          "Cooldown": 60,
          "DesiredCapacity": {
            "Ref": "DesiredCapacity"
          },
          "HealthCheckGracePeriod": 30,
          "HealthCheckType": "EC2",
          "LaunchTemplate": {
            "LaunchTemplateId": {
              "Ref": "InstancesTemplate"
            },
            "Version": {
              "Fn::GetAtt": "InstancesTemplate.LatestVersionNumber"
            }
          },
          "LoadBalancerNames": [
            {
              "Ref": "LoadBalancer"
            }
          ],
          "MaxSize": {
            "Ref": "DesiredCapacity"
          },
          "MetricsCollection": [
            {
              "Granularity": "1Minute"
            }
          ],
          "MinSize": {
            "Ref": "DesiredCapacity"
          },
          "VPCZoneIdentifier": [
            {
              "Ref": "PrivateSubnet"
            }
          ]
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MaxBatchSize": 1,
            "MinInstancesInService": 1,
            "PauseTime": 30,
            "WaitOnResourceSignals": false
          }
        }
      },
      "InstancesTemplate": {
        "Type": "AWS::EC2::LaunchTemplate",
        "Properties": {
          "LaunchTemplateData": {
            "IamInstanceProfile": {
              "Arn": {
                "Fn::GetAtt": "DynamoAccessInstanceProfile.Arn"
              }
            },
            "ImageId": {
              "Ref": "LatestAmiId"
            },
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "Monitoring": {
              "Enabled": true
            },
            "NetworkInterfaces": [
              {
                "AssociatePublicIpAddress": false,
                "DeleteOnTermination": true,
                "DeviceIndex": 0,
                "Groups": [
                  {
                    "Fn::GetAtt": "InstancesSecurityGroup.GroupId"
                  }
                ]
              }
            ],
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "\n",
                  [
                    "#!/bin/bash",
                    "yum install -y tar git curl",
                    "curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -",
                    "yum -y install nodejs",
                    "npm install -g pm2@5.2.0",
                    "git clone https://github.com/cloudacademy/dynamo-demo",
                    {
                      "Fn::Sub": "export AWS_REGION=${AWS::Region}"
                    },
                    "cd dynamo-demo",
                    {
                      "Fn::Sub": "pm2 start server.js -- --port 8888 --table ${DynamoTable}"
                    }
                  ]
                ]
              }
            }
          },
          "LaunchTemplateName": {
            "Fn::Sub": "${AWS::StackName}-launch-template"
          }
        }
      },
      "DynamoTable": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [
            {
              "AttributeName": "id",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "id",
              "KeyType": "HASH"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": {
              "Ref": "TableThroughput"
            },
            "WriteCapacityUnits": {
              "Ref": "TableThroughput"
            }
          }
        }
      },
      "DynamoAccessRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
          ],
          "Path": "/"
        }
      },
      "DynamoAccessInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [
            {
              "Ref": "DynamoAccessRole"
            }
          ]
        }
      },
      "InstancesSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Load balancer to instances",
          "SecurityGroupIngress": [
            {
              "FromPort": 8888,
              "IpProtocol": "TCP",
              "SourceSecurityGroupId": {
                "Ref": "LoadBalancerSecurityGroup"
              },
              "ToPort": 8888
            }
          ],
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "LoadBalancerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Internet to load balancer",
          "SecurityGroupIngress": [
            {
              "CidrIp": "0.0.0.0/0",
              "FromPort": 80,
              "IpProtocol": "TCP",
              "ToPort": 80
            }
          ],
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "NATInstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Instances to NAT instance",
          "SecurityGroupIngress": [
            {
              "FromPort": 0,
              "IpProtocol": -1,
              "SourceSecurityGroupId": {
                "Ref": "InstancesSecurityGroup"
              },
              "ToPort": 65535
            }
          ],
          "VpcId": {
            "Ref": "VPC"
          }
        }
      }
    },
    "Outputs": {
      "TodoUrl": {
        "Description": "The URL for the Todo application",
        "Value": {
          "Fn::Join": [
            "",
            [
              "http://",
              {
                "Fn::GetAtt": ["LoadBalancer", "DNSName"]
              },
              "/index.html"
            ]
          ]
        }
      }
    }
  }